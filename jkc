#!/bin/bash

#############  CONSTANTES  #############
UTILS_MODULE=

SELF=`readlink $0 || echo $0`
SCRIPT_PATH=`dirname $SELF`

#supondo o script no root do repositorio
JARAKI_PATH=`cd $SCRIPT_PATH; pwd`

UTILS_MODULE=jaraki_utils
############# FUNCOES #############

function usage
{
	echo "Usage: `basename $0` [options] [.java file]

	[-h   | --help]  Prints this help
	[-tk  | --tokens]  Prints the tokens list of the given .java file
	[-jast | --java_ast]  Prints the Java Abstract Sintax Tree (AST) of the given .java file
	[-Feast | --file_erlang_ast] Extract and print the Erlang AST from a .erl file
	[-east | --erlang_ast]  Prints the Converted Erlang AST of the given .java file
	[-d   | --debug ]  Compile jaraki code debugging the \"java_compile\" module

	NOTE: If any option other than -d is passed, no erlang code file is generated!"
#[-abf | --erlang_abs] Prints the Abstract Format Tree of the given .erl file
}

function generate_erl
{
	#echo "Generating Erlang source code from Jaraki..."
	compileParams=""
	dirName=""
	tempFileName=""
	filePathAndName=""
	for (( i = 0; i < fileIndex; i++ ))
	do
		#echo "filename $i:"${filename[$i]}
		filePathAndName=$JARAKI_PATH"/"${filename[$i]}
		dirName="filename:dirname(\""$filePathAndName"\")"
		tempFileName="filename:basename(\""$filePathAndName"\")"
		compileParams=$compileParams"{"$dirName", "$tempFileName"}"
		if [ `expr $i + 1` != $fileIndex ]; then
			compileParams=$compileParams","
		fi
	done
	#echo "$compileParams"
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:compile( [$compileParams] )." -s erlang halt
	#echo ""
	#echo "done!"
	#echo ""
}

function print_tokens
{
	compileParams=""
	if [ $fileIndex > 1 ]; then
		echo "More then one .java received, printing tokens only for "$filename[0]"!"
		echo ""
	fi
	compileParams=$compileParams"\""$JARAKI_PATH"/"${filename[0]}"\""
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:print_tokens("$compileParams")." -s erlang halt
	echo ""
}

function print_jtree
{
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:print_java_ast(\"$JARAKI_PATH/$filename\")." -s erlang halt
	echo ""
}

function print_fetree
{
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:print_erl_ast_from_erlang(\"$JARAKI_PATH/$filename\")." -s erlang halt
	echo ""
}

function print_etree
{
	compileParams=""
	if [ $fileIndex > 1 ]; then
		echo "More then one .java received, printing tokens only for "$filename[0]"!"
		echo ""
	fi
	compileParams=$compileParams"\""$JARAKI_PATH"/"${filename[0]}"\""
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:print_erl_ast("$compileParams")." -s erlang halt
	echo ""
}

function print_erl_tree
{
	erl -pa $JARAKI_PATH/ebin -noshell -eval "jaraki_utils:print_erl_ast(\"$JARAKI_PATH/$filename\")." -s erlang halt
	echo ""
}

function debug_compile
{
	echo "A ser implementado..."
	echo ""
}

#############  SCRIPT  #############

# Foram passados parâmetros?
# $# -> quantidade de param.
if [ $# -eq 0 ]; then
	usage # executa funcao usage acima
	exit 1
fi

# var para armazenar se foi passada opção -tk
tokens=

# var para armazenar se foi passada opção -tr
jtree=
etree=
fetree=
#abf=
fileIndex=0
filenames[$fileIndex]=""

# var para armazenar se deve ou não compilar
generate_erl=1

while [ "$1" != "" ]; do
    case $1 in
        -tk | --tokens )        tokens=1
								generate_erl=0
                                ;;
        -jast | --java_ast )	jtree=1
								generate_erl=0
                                ;;
        -east | --erlang_ast )	etree=1
								generate_erl=0
                                ;;
		-Feast | --file_erlang_ast )
			fetree=1
            generate_erl=0
			;;
#		-abf | --erlang_abs )	abf=1
#								generate_erl=0
#								;;
        -h | --help )           usage
                                exit
                                ;;
		-d | --debug )			debug=1
								;;
        *.java )                filename[$fileIndex]=$1
								fileIndex=`expr $fileIndex + 1`
								;;
        *.erl )                filename[$fileIndex]=$1
								fileIndex=`expr $fileIndex + 1`
								;;
		* )						echo "*** Error: file especified \"$1\" has not .java extension"
								echo "" #newline
								usage
								exit 1
    esac
    shift
done

if [ "$filename" == "" ]; then
	echo "*** Error: no file especified"
	echo ""
	usage
	exit 1
fi

if [ "$tokens" == "1" ]; then
	print_tokens
fi

if [ "$jtree" == "1" ]; then
	print_jtree
fi

if [ "$etree" == "1" ]; then
	print_etree
fi

if [ "$fetree" == "1" ]; then
	print_fetree
fi

if [ "$debug" == "1" ]; then
	debug_compile
fi

if [ "$generate_erl" == "1" ]; then
	generate_erl
fi
